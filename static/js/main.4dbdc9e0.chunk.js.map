{"version":3,"sources":["constants.js","Cell.js","Game.js","Tools.js","Scores.js","App.js","DataProvider.js","registerServiceWorker.js","index.js"],"names":["COLORS","hiddenCell","cell","mines0","mines1","mines2","mines3","mines4","mines5","mines6","GAME_STATUS","PLAYING","WON","LOST","MINE_QUANTITY","CellStyled","styled","hidden","type","mines","NumberStyled","IconStyled","Cell","onClick","onContextClick","onContextMenu","flag","src","FlagIcon","alt","FlameIcon","Game","isGameWon","allCells","props","cells","reduce","acc","findNullCells","nextMines","map","Object","values","getCloseCells","filter","flattenNextMines","concat","uniqCells","forEach","position","length","onClickCell","cellClicked","status","onWin","dispatch","payload","cellsToShow","newCells","includes","e","preventDefault","flagAmount","remainingMine","this","key","Component","ToolsWrapper","ToolSpan","ToolButton","Tools","onRestart","DataContext","Consumer","state","time","Wrapper","Scores","scores","resetScores","index","name","intervalHolder","Container","AppWrapper","backgroundColor","playing","won","lost","App","restart","setState","localStorage","setItem","prompt","newScore","scoresString","getItem","JSON","parse","stringify","oldScoreString","cellQuantity","mineQuantity","closeCells","isTop","isLeft","isBottom","isRight","x","str","getLastDigit","getNewGameCells","cellsWithMines","getMines","candidatePosition","Math","floor","random","Array","keys","React","createContext","reducer","action","Error","DataProvider","useReducer","useEffect","clearInterval","setInterval","Provider","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4dbdc9e0.chunk.js","sourcesContent":["const LIGHT_GREEN = '#33cc33'\nconst GREEN = '#80cc33'\nconst DARK_GREEN = '#cccc33'\nconst ORANGE = '#cc8033'\nconst RED = '#cc3333'\nconst DARK_RED = '#cc3359'\nconst PURPLE = '#cc33a6'\n\nexport const COLORS = {\n  hiddenCell: 'grey',\n  cell: 'white',\n  mines0: LIGHT_GREEN,\n  mines1: GREEN,\n  mines2: DARK_GREEN,\n  mines3: ORANGE,\n  mines4: RED,\n  mines5: DARK_RED,\n  mines6: PURPLE,\n}\n\nexport const GAME_STATUS = {\n  PLAYING: 'playing',\n  WON: 'won',\n  LOST: 'lost',\n}\n\nexport const MINE_QUANTITY = 15\nexport const CELL_QUANTITY = 100\n","import React from 'react'\nimport styled from 'styled-components'\nimport FlagIcon from 'ionicons/dist/ionicons/svg/ios-flag.svg'\nimport FlameIcon from 'ionicons/dist/ionicons/svg/md-flame.svg'\nimport { COLORS } from './constants'\n\nconst CellStyled = styled('div')`\n  position: relative;\n  width: 10%;\n  height: 10%;\n  border: 1px solid black;\n  display: inline-block;\n  vertical-align: top;\n  box-sizing: border-box;\n  cursor: pointer;\n  background-color: ${({ cell }) => (cell.hidden)\n    ? COLORS.hiddenCell\n    : COLORS.cell};\n  ${({ cell }) => (cell.type !== 'mine' && !cell.hidden)\n    ? `color: ${COLORS[`mines${cell.mines}`]}`\n    : ''};\n`\n\nconst NumberStyled = styled('span')`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`\n\nconst IconStyled = styled('img')`\n  width: 100%;\n`\n\nconst Cell = ({ cell, onClick, onContextClick }) => (\n  <CellStyled cell={cell} onClick={onClick} onContextMenu={onContextClick}>\n    {\n      cell.hidden\n        ? (cell.flag\n          ? <IconStyled src={FlagIcon} alt=\"flag\" />\n          : '')\n        : (cell.type === 'mine'\n          ?  <IconStyled src={FlameIcon} alt=\"flame\" />\n          : <NumberStyled>{ cell.mines }</NumberStyled>)\n    }\n  </CellStyled>\n)\n\nexport default Cell\n","import React, { Component } from 'react'\nimport Cell from './Cell'\nimport { getCloseCells } from './DataProvider';\nimport { GAME_STATUS, MINE_QUANTITY } from './constants'\n\nclass Game extends Component {\n\n  isGameWon = allCells => {\n    const cells = allCells || this.props.cells\n    const isWon = cells.reduce((acc, { type, hidden }) => {\n      if (acc === false)\n        return false\n\n      if ((type === 'mine' && hidden === true) || (type === 'clean' && hidden === false))\n        return true\n\n      return false\n    }, true)\n\n    return isWon\n  }\n\n  findNullCells = cells => {\n    const nextMines = cells\n      .map(cell => [ cell, ...Object.values(getCloseCells(cell, this.props.cells)) ]\n          .filter(cell => (cell.type === 'clean' && cell.mines === 0))\n      )\n\n    const flattenNextMines = [].concat(...nextMines)\n\n    let uniqCells = {}\n    flattenNextMines.forEach(cell => {\n      uniqCells[cell.position] = cell\n    })\n    uniqCells = Object.values(uniqCells)\n\n    return (cells.length === uniqCells.length)\n      ? uniqCells\n      : this.findNullCells(uniqCells)\n  }\n\n  onClickCell = cellClicked => () => {\n    const { cells } = this.props\n    const { status, onWin } = this.props\n\n    if (cellClicked.flag || status !== GAME_STATUS.PLAYING)\n      return\n\n    if (cellClicked.type === 'mine')\n      this.props.dispatch({ type: 'CHANGE_GAME_STATUS', payload: GAME_STATUS.LOST });\n\n    const cellsToShow = (cellClicked.type === 'clean' && cellClicked.mines === 0)\n      ? this.findNullCells([cellClicked]).map(({ position }) => position)\n      : [cellClicked.position]\n\n    const newCells = cells.map(cell => (cellsToShow.includes(cell.position))\n        ? { ...cell, hidden: false }\n        : cell)\n\n    if (this.isGameWon(newCells))\n      onWin()\n\n      this.props.dispatch({ type: 'SET_CELLS', payload: newCells })\n  }\n\n  onContextMenu = cellClicked => e => {\n    if (cellClicked.hidden === true) {\n      e.preventDefault()\n\n      const newCells = this.props.cells.map(cell => (cell.position === cellClicked.position)\n          ? { ...cell, flag: !cell.flag }\n          : cell)\n\n      const flagAmount = newCells.filter(({ flag }) => flag).length\n\n      this.props.dispatch({\n        type: 'ON_PUT_FLAG',\n        payload: {\n          remainingMine: (MINE_QUANTITY - flagAmount),\n          cells: newCells,\n        },\n      })\n    }\n  }\n\n  render() {\n    return this.props.cells.map(cell =>\n      <Cell\n        key={cell.position}\n        cell={cell}\n        onClick={this.onClickCell(cell)}\n        onContextClick={this.onContextMenu(cell)}\n      />\n    )\n  }\n}\n\nexport default Game\n","import React from 'react'\nimport styled from 'styled-components'\nimport { DataContext } from './DataProvider'\n\nconst ToolsWrapper = styled('div')`\n  position: absolute;\n  top: -15px;\n  left: 0;\n  width: 100%;\n  transform: translateY(-100%);\n  color: white;\n  padding: 10px 0px;\n`\n\nconst ToolSpan = styled('span')`\n  margin-right: 10px;\n`\n\nconst ToolButton = styled('button')`\n  margin-right: 10px;\n`\n\nconst Tools = ({ onRestart }) => (\n  <DataContext.Consumer>{ ([state]) => (\n    <ToolsWrapper>\n      <ToolButton onClick={onRestart}>restart</ToolButton>\n      \n        <ToolSpan>{ `time : ${state.time}` }</ToolSpan>\n      \n      <ToolSpan>{ `remaining : ${state.remainingMine}` }</ToolSpan>\n    </ToolsWrapper>\n  ) }</DataContext.Consumer>\n)\n\nexport default Tools\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled('div')`\n  position: absolute;\n  right: 0;\n  color: white;\n  transform: translateX(100%);\n  padding-left: 20px;\n`\n\nconst Scores = ({ scores, resetScores }) => (\n  <Wrapper>\n    { scores.map(({ name, time }, index) => (\n      <p key={index}>{ `${name}: ${time}` }</p>\n    )) }\n    <button onClick={resetScores}>Reset scores</button>\n  </Wrapper>\n)\n\nexport default Scores\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport Game from './Game'\nimport Tools from './Tools'\nimport Scores from './Scores'\nimport { GAME_STATUS, MINE_QUANTITY } from './constants'\nimport { DataContext } from './DataProvider';\n\nconst Container = styled('div')`\n  width: 400px;\n  height: 400px;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #949494;\n`\n\nconst AppWrapper = styled('div')`\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n`\n\nconst COLORS = {\n  playing: 'black',\n  won: 'green',\n  lost: 'red',\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    const oldScoreString = localStorage.getItem('scores') || '[]'\n    let scores\n\n    try {\n      scores = JSON.parse(oldScoreString)\n    } catch (e) {\n      scores = []\n    }\n\n    localStorage.setItem('scores', JSON.stringify(scores))\n\n    this.state = { scores }\n  }\n\n  restart = () => {\n    this.props.dispatch({ type: 'RESTART' });\n  }\n\n  resetScores = () => {\n    this.setState({ scores: [] })\n    localStorage.setItem('scores', '[]')\n  }\n\n  onWin = () => {\n    this.props.dispatch({ type: 'CHANGE_GAME_STATUS', payload: GAME_STATUS.WON });\n\n    const name = prompt('Please enter your name to save your score or cancel')\n    if (name) {\n      const { time } = this.props.state\n      const newScore = { name, time }\n      const scoresString = localStorage.getItem('scores')\n      const scores = scoresString ? [newScore, ...JSON.parse(scoresString)] : [newScore]\n      this.setState({ scores })\n      localStorage.setItem('scores', JSON.stringify(scores))\n    }\n  }\n\n  render() {\n    return (\n      <AppWrapper backgroundColor={COLORS[this.props.state.status]}>\n        <Container>\n          <Tools onRestart={this.restart} />\n          <Scores scores={this.state.scores} resetScores={this.resetScores} />\n\n          <DataContext.Consumer>\n            { ([state, dispatch]) => (\n              <Game\n                dispatch={dispatch}\n                cells={state.cells}\n                status={state.status}\n                cellQuantity={100}\n                mineQuantity={MINE_QUANTITY}\n                onWin={this.onWin}\n              />\n            ) }\n          </DataContext.Consumer>\n        </Container>\n      </AppWrapper>\n    )\n  }\n}\n\nexport default App\n","import React, { useReducer, useEffect } from 'react';\nimport App from './App';\nimport { GAME_STATUS, MINE_QUANTITY, CELL_QUANTITY } from './constants';\n\nconst getLastDigit = x => {\n  const str = JSON.stringify(x)\n  return str[str.length - 1]\n}\n\nexport const getCloseCells = (cell, allCells) => {\n  const cells = allCells\n  const position = cell.position\n  const closeCells = {}\n  const isTop = (position < 10)\n  const isLeft = (position % 10 === 0)\n  const isBottom = (position >= (cells.length - 10))\n  const isRight = (getLastDigit(position) === '9')\n\n  if (!isTop)\n    closeCells[position - 10] = cells[position - 10]\n\n  if (!isTop && !isLeft)\n    closeCells[position - 11] = cells[position - 11]\n\n  if (!isLeft)\n    closeCells[position - 1] = cells[position - 1]\n\n  if (!isLeft && !isBottom)\n    closeCells[position + 9] = cells[position + 9]\n\n  if (!isBottom)\n    closeCells[position + 10] = cells[position + 10]\n\n  if (!isBottom && !isRight)\n    closeCells[position + 11] = cells[position + 11]\n\n  if (!isRight)\n    closeCells[position + 1] = cells[position + 1]\n\n  if (!isTop && !isRight)\n    closeCells[position - 9] = cells[position - 9]\n\n  return closeCells\n}\n\nconst getMines = (cells, mines) => {\n  const candidatePosition = Math.floor(Math.random() * cells.length)\n\n  if (cells[candidatePosition].type !== 'mine') {\n    cells[candidatePosition].type = 'mine'\n    return (mines === 1) ? cells : getMines(cells, mines -= 1)\n  }\n  else return getMines(cells, mines)\n}\n\nconst getNewGameCells = () => {\n  const emptyList = [...Array(CELL_QUANTITY).keys()].map(position => ({\n    type: '',\n    position,\n    hidden: true,\n    flag: false,\n  }))\n\n  const cellsWithMines = getMines(emptyList, MINE_QUANTITY)\n\n  return cellsWithMines\n    .map(cell => {\n      if (cell.type === 'mine')\n        return cell\n\n      else {\n        const position = cell.position\n        const closeCells = getCloseCells(cell, cellsWithMines)\n        const mines = Object.values(closeCells).filter(({ type }) => type === 'mine').length\n        return { type: 'clean', position, mines, hidden: true }\n      }\n    })\n}\n\nexport const DataContext = React.createContext(null);\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'TIME_INCREMENT':\n      return (state.status === GAME_STATUS.PLAYING)\n        ? { ...state, time: state.time + 1 }\n        : state;\n\n    case 'RESTART':\n      return {\n        ...state,\n        status: GAME_STATUS.PLAYING,\n        cells: getNewGameCells(),\n        time: 0,\n        remainingMine: MINE_QUANTITY,\n      };\n\n    case 'SET_CELLS':\n      return { ...state, cells: action.payload };\n\n    case 'CHANGE_GAME_STATUS':\n      return { ...state, status: action.payload };\n\n    case 'ON_PUT_FLAG':\n      return {\n        ...state,\n        remainingMine: action.payload.remainingMine,\n        cells: action.payload.cells,\n      };\n\n    default:\n      throw new Error();\n  }\n}\n\nlet intervalHolder;\n\nconst DataProvider = () => {\n  const [state, dispatch] = useReducer(reducer, {\n    status: GAME_STATUS.PLAYING,\n    cells: getNewGameCells(),\n    time: 0,\n    remainingMine: MINE_QUANTITY,\n  });\n\n  useEffect(() => {\n    if (intervalHolder) {\n      clearInterval(intervalHolder)\n    }\n\n    intervalHolder = setInterval(() => {\n      if (state.status === GAME_STATUS.PLAYING) {\n        dispatch({ type: 'TIME_INCREMENT' });\n      }\n    }, 1000)\n  }, [state.status])\n\n  return (\n    <DataContext.Provider value={[state, dispatch]}>\n      <App state={state} dispatch={dispatch} />\n    </DataContext.Provider>\n  );\n};\n\nexport default DataProvider;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available please refresh.\" message in your web app.\n              console.log('New content is available please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport DataProvider from './DataProvider'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<DataProvider />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}